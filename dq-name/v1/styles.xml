<styles>
  <!-- the next two tags are for the documentation document [technicalConsiderations, limitations] -->
  <technicalConsiderations>
    <![CDATA[
      <p>Here you can add your technical considerations text for the documentation</p>
      <p>Feel free to write with html tags </p>
      ]]>
  </technicalConsiderations>
  <limitations>
    <![CDATA[
    This tag is also for the documentaion you can add html tags in order to format the documentaion. <p> some paragraph</p>
    ]]>
  </limitations>

  <!-- include dq.less -> all css should be kept in that file the file will auto-name-space the css.
  Essentially wraps a dq-Name id (#dqName{ all dq specific css }) around all css -->
  <less href="dq.less"/>
  <!-- if user use the uncompressed/ un uglified js else server the minified one -->
  <!-- when writing the DQ run the task runner grunt to watch for changes in the script.js to write to the minified version script.min.js -->
  <!-- see package.json && grunt.js -->
  <!-- grid.js is helpful for punching values view grid.js to decide if needed or not -->
  <include href="grid.js" />
  <!-- if you don't minify your script.js then remove the line below else your DQ js ie. script.min.js will not be there and not loaded -->
  <include cond="not gv.isUser()" href="script.min.js" />
  <include cond="gv.isUser()" href="script.js" />

  <!-- dfault style variable for examples and info look here-->
  <!-- https://support.focusvision.com/Decipher/007_Advanced_Programming/008_Styles_and_Formatting/002_Creating_Custom_Styles/  002_Dynamic_Question_Style_Design_and_QA_Checklist#2.7.1:__Style_Variables -->

  <!-- use type="res" to make it translatable in the xlates. You can restrict what kind of elements the style variable may be applied to  using the tag attribute (e.g. col, row or choice). For example, tag="row" makes the style variable only available to <row> elements.-->
  <stylevar name="dq-name:help-hover" where="builder" type="res" title="Help text" desc="Help text displayed when hovered over info icon">You are hovering over a info icon</stylevar>





<!-- Adding the question.header and question.footer to this template purely to be able to add a wrapper id around the original question for styling purposes
to allow instant styling rather than applying this via JS and have the styling only applied after JS loaded -->
<style name='question.header'> <![CDATA[
<div id="dq-name_${this.label}">
<div id="question_${this.label}" class="question ${'disabledElement ' if why and gv.debug.qa else ''}${this.getName().lower()} label_${this.label} $(this.styles.ss.questionClassNames) $(hasError)"${' role="radiogroup" aria-labelledby="' + (this.label + '_' + ec.enabledCols[0].label if ec.haveColLegend else 'question_text_' + this.label) + '"' if ec.simpleList else ''}>
${v2_insertStyle('survey.question')}
$(error)
${v2_insertStyle('survey.question.instructions')}
${v2_insertStyle('survey.question.answers.start')}
]]></style>


<style name='question.footer'> <![CDATA[
${v2_insertStyle('survey.question.answers.end')}
</div>
</div>
<!-- /.question -->
]]></style>




  <style name="question.after" wrap="ready" cond="device.smartphone or device.tablet or device.desktop">
    <![CDATA[
        var jsexport = ${jsexport()};
        \@if gv.hasQA(True) and gv.showCms()
        jsexport.debug = true;
        // run the qunit tests       
        \@endif
        // uses is needed for the grid.js set up
        jsexport.uses = ${[use.split('.')[0] for use in this.uses]};
        jsexport.optional = ${this.optional}
        Survey.question.dq-name.setup(jsexport);
    ]]>
  </style>

<!-- add page specific CSS to this page.head else DQ specific CSS from the dq.less tend to spill into the overall less/css file which can affect the whole survey layout -->
<!-- good and below an example for media queries based on the html #surveyContainer -->
<style name="page.head"><![CDATA[
<style>

@media screen and (min-width:890px) and (min-height:770px){

  #surveyContainer,html{
      display: flex;
      flex-direction: column;
      justify-content: center;
      height: 100%;
  }


}

</style>
]]></style>



</styles>